'use client';

import type { ScrollAreaViewportProps } from '@radix-ui/react-scroll-area';
import { CheckIcon, CopyIcon } from 'lucide-react';
import type { ButtonHTMLAttributes } from 'react';
import { forwardRef, type HTMLAttributes, useCallback, useRef } from 'react';

import { Button } from '@/components/ui/button';
import {
  ScrollArea,
  ScrollBar,
  ScrollViewport,
} from '@/components/ui/scroll-area';
import { useCopyButton } from '@/hooks/use-copy-button';
import { cn } from '@/lib/utils';

export interface CodeBlockProps extends HTMLAttributes<HTMLElement> {
  icon?: React.ReactNode;

  /**
   * Allow to copy code with copy button
   * @default true
   */
  allowCopy?: boolean;

  /**
   * Keep original background color generated by Shiki or Rehype Code
   * @default false
   */
  keepBackground?: boolean;

  viewportProps?: ScrollAreaViewportProps;
}

const CopyButton = ({
  className,
  onCopy,
  ...props
}: ButtonHTMLAttributes<HTMLButtonElement> & {
  onCopy: () => void;
}) => {
  const [checked, onClick] = useCopyButton(onCopy);

  return (
    <Button
      type="button"
      variant="ghost"
      className={cn(
        'transition-opacity group-hover:opacity-100 [&_svg]:size-3.5',
        !checked && '[@media(hover:hover)]:opacity-0',
        className,
      )}
      aria-label={checked ? 'Copied text' : 'Copy text'}
      onClick={onClick}
      {...props}
    >
      <CheckIcon
        className={cn('transition-transform', !checked && 'scale-0')}
      />
      <CopyIcon
        className={cn('absolute transition-transform', checked && 'scale-0')}
      />
    </Button>
  );
};

export const Pre = forwardRef<HTMLPreElement, HTMLAttributes<HTMLPreElement>>(
  ({ className, children, ...props }, ref) => {
    return (
      <pre
        ref={ref}
        className={cn('p-4 focus-visible:outline-none', className)}
        {...props}
      >
        {children}
      </pre>
    );
  },
);

Pre.displayName = 'Pre';

export const CodeBlock = forwardRef<HTMLElement, CodeBlockProps>(
  (
    {
      title,
      allowCopy = true,
      keepBackground = false,
      icon,
      viewportProps,
      className,
      children,
      ...props
    },
    ref,
  ) => {
    const areaRef = useRef<HTMLDivElement>(null);
    const onCopy = useCallback(() => {
      const pre = areaRef.current?.getElementsByTagName('pre').item(0);

      if (!pre) return;

      const clone = pre.cloneNode(true) as HTMLElement;
      clone.querySelectorAll('.copy-ignore').forEach((node) => {
        node.remove();
      });

      void navigator.clipboard.writeText(clone.textContent ?? '');
    }, []);

    return (
      <figure
        ref={ref}
        {...props}
        className={cn(
          'not-prose group codeblock border-accent relative overflow-hidden rounded-lg border text-sm',
          keepBackground && 'bg-(--shiki-light-bg) dark:bg-(--shiki-dark-bg)',
          className,
        )}
      >
        {title ? (
          <div className="border-accent flex flex-row items-center gap-2 border-b px-4 py-1.5">
            {icon && (
              <div
                className="text-muted-foreground [&_svg]:size-3.5"
                dangerouslySetInnerHTML={
                  typeof icon === 'string' ? { __html: icon } : undefined
                }
              >
                {typeof icon !== 'string' ? icon : null}
              </div>
            )}
            <figcaption className="text-muted-foreground flex-1 truncate">
              {title}
            </figcaption>
            {allowCopy && <CopyButton className="-me-2" onCopy={onCopy} />}
          </div>
        ) : (
          allowCopy && (
            <CopyButton
              className="absolute top-2 right-2 z-[2] backdrop-blur-md"
              onCopy={onCopy}
            />
          )
        )}
        <ScrollArea ref={areaRef} dir="ltr">
          <ScrollViewport
            {...viewportProps}
            className={cn('max-h-[600px]', viewportProps?.className)}
          >
            {children}
          </ScrollViewport>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </figure>
    );
  },
);

CodeBlock.displayName = 'CodeBlock';
